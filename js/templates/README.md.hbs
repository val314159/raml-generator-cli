# {{title}}

Browser and node module for making API requests against [{{title}}]({{baseUri}}).

**Please note: This module uses [Popsicle](https://github.com/blakeembrey/popsicle) to make API requests. Promises must be supported or polyfilled on all target environments.**

## Installation

```
npm install {{paramCase title}} --save
bower install {{paramCase title}} --save
```

## Usage

### Node

```javascript
var {{pascalCase title}} = require('{{paramCase title}}');

var client = new {{pascalCase title}}();
```

### Browsers

```html
<script src="{{paramCase title}}/index.js">

<script>
  var client = new window.{{pascalCase title}}();
</script>
```

{{#if security.[OAuth 2.0]}}
### Authentication

#### OAuth 2.0

This API supports authentication with [OAuth 2.0](https://github.com/mulesoft/js-client-oauth2). Initialize the `OAuth2` instance with the application client id, client secret and a redirect uri to authenticate with users.

```js
var auth = new {{pascalCase title}}.OAuth2({
  clientId:     '123',
  clientSecret: 'abc',
  redirectUri:  'http://example.com/auth/callback'
});
```

**All `getToken()` calls are asynchronous and return promise objects which resolve to an access token instance.**

{{#if (contains security.[OAuth 2.0].settings.authorizationGrants 'code')}}
##### [Authorization Code Grant](https://github.com/mulesoft/js-client-oauth2#authorization-code-grant)

1. Redirect user to `auth.code.getUri()`.
2. Parse response uri and get an access token instance using `auth.code.getToken(uri)`.

{{/if}}{{#if (contains security.[OAuth 2.0].settings.authorizationGrants 'token')}}
##### [Implicit Grant](https://github.com/mulesoft/js-client-oauth2#implicit-grant)

1. Redirect user to `auth.token.getUri()` in a browser.
2. Parse response uri and get an access token instance using `auth.token.getToken(uri)`.

{{/if}}{{#if (contains security.[OAuth 2.0].settings.authorizationGrants 'owner')}}
##### [Resource Owner Password Credentials Grant](https://github.com/mulesoft/js-client-oauth2#resource-owner-password-credentials-grant)

1. Make a direct request for the access token on behalf of the user using `auth.owner.getToken(username, password)`.

{{/if}}{{#if (contains security.[OAuth 2.0].settings.authorizationGrants 'credentials')}}
##### [Client Credentials Grant](https://github.com/mulesoft/js-client-oauth2#client-credentials-grant)

1. Get the access token for the application by using `auth.credentials.getToken()`.

{{/if}}##### Access Tokens

Access token instances can be manually re-created. This is critical for access token reuse, such as saving credentials to a database for reusing later in the codebase.

```js
var token = auth.createToken('access token', 'refresh token');
```

An access token instance (manually created or automatically generated by a `getToken()` method) can be passed into any API request. This will sign the API request with the current users access token credentials.

```js
// Existing API client instance.
client.resource('/').get(null, {
  user: token
});

// New API client instance.
var client = new {{pascalCase title}}({
  user: token
});
```

{{/if}}### Options

You can set options when you initialize a client or at any time with the `options` property. You may also override options for a single request by passing an object as the second argument of any request method. For example:

```javascript
var client = new {{pascalCase title}}({ ... });

client.options = { ... };

client.resource('/').get(null, {
  baseUri: 'http://example.com',
  headers: {
    'Content-Type': 'application/json'
  }
});
```

#### Base URI

You can override the base URI by setting the `baseUri` property, or initializing a client with a base URI. For example:

```javascript
new {{pascalCase title}}({
  baseUri: 'https://example.com'
});
```

#### Base URI Parameters

If the base URI has parameters inline, you can set them by updating the `baseUriParameters` property. For example:

```javascript
client.options.baseUriParameters.version = '{{#if version}}{{version}}{{else}}v3{{/if}}';
```

### Resources

All methods return a HTTP request instance of [Popsicle](https://github.com/blakeembrey/popsicle), which allows the use of promises (and streaming in node).

{{#each allResources}}{{#if (keys methods)}}#### {{{requestSnippet this}}}

{{#if uriParameters}}{{{parametersSnippet uriParameters}}}

{{/if}}{{#if description}}{{{description}}}

{{/if}}
```js
var resource = client.{{{requestSnippet this}}};
```

{{#each methods}}##### {{upperCase method}}

{{#if description}}{{{description}}}

{{/if}}
```js
resource.{{key}}().then(function (res) { ... });
```

{{#if (keys queryParameters)}}##### Query Parameters

```javascript
{{#if (equal method 'get')}}
resource.{{key}}({ ... });
{{else}}
resource.{{key}}(null, { query: { ... } });
{{/if}}
```

{{{parametersSnippet queryParameters}}}

{{/if}}{{#if (keys headers)}}##### Headers

```javascript
resource.{{key}}(null, {
  headers: { ... }
});
```

{{{parametersSnippet headers}}}

{{/if}}{{#if (keys body)}}##### Body

{{#each body}}
**{{@key}}**

{{#if schema}}
```
{{{schema}}}
```

{{/if}}{{#if formParameters}}{{{json formParameters 2}}}

{{/if}}{{/each}}{{/if}}{{/each}}{{/if}}{{/each}}

### Custom Resources

You can make requests to a custom path in the API using the `#resource(path)` method.

```javascript
client.resource('/example/path').get();
```

## License

Apache 2.0
